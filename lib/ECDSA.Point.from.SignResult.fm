ECDSA.Point.from.SignResult(msgHash: String, sign: ECDSA.SignResult, recovery: Nat): ECDSA.Error(ECDSA.Point)
  get r s = sign
  case Bool.or(Nat.eql(r, 0), Nat.eql(s, 0)):
  | ECDSA.Error.err<>(ECDSA.ErrorTypes.invalid_signature_hex);
  | let rinv = ECDSA.invert(r, ECDSA.CURVE.n)
    let h = Nat.parse_hex(msgHash)
    let header = U8.from_nat(Nat.add(2, Nat.bitwise_and(recovery, 1)))
    let bytes = Vector.ext<U8, 32>(header, U8_Vector.from_nat(32, r))
    use P_ = ECDSA.Error.bind<,>(ECDSA.Point.from_compressed_bytes(bytes))
    let sP = ECDSA.Jacobian.mul_unsafe(ECDSA.Jacobian.from_point(P_), s)
    let hG = ECDSA.Jacobian.negate(ECDSA.Jacobian.base.mul(h))
    let Q = ECDSA.Jacobian.mul_unsafe(ECDSA.Jacobian.add(sP, hG), rinv)
    let point = ECDSA.Jacobian.to_point(Q)
    ECDSA.Point.valid_point(point);
