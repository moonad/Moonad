GSet.intersection<A: Type>(
  cmp   : A -> A -> Cmp, 
  set_a : GSet(A), 
  set_b : GSet(A)
) : GSet(A)

  case set_a:
  | tip => 
    case set_b:
    | tip => GSet.tip<>;
    | bin => GSet.tip<>;
  ;
  | bin => 
    case set_b:
    | tip => GSet.tip<>;
    | bin => 
      // divide & conquer
      let ltn = GSet.split_ltn<>(cmp, set_b.val, set_a)
      let gtn = GSet.split_gtn<>(cmp, set_b.val, set_a)
      let new_left  = GSet.intersection<>(cmp, ltn, set_b.left)
      let new_right = GSet.intersection<>(cmp, gtn, set_b.right)

      if GSet.member<>(cmp, set_b.val, set_a) then 
        GSet.concat3<>(cmp, set_b.val, new_left, new_right)

      else 
        GSet.concat<>(new_left, new_right)
    ;
  ;
