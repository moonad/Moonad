//   Suppose we have two Maps: T1 and T2  
//     T1            T2 
//      v             u 
//     / \           / \ 
//    A   B         C   D        
//
//    We can implement efficient Map x Map -> Map operations
//    but applying a "divide and conque" strategy, that means
//    we'll break those sets in smaller parts using `split_ltn`
//    and `split_gtn`, perform the desired  operation on those 
//    smaller parts, and then combine everything with `concat3`
//
//    - <> can be union, difference, intersection...
//    - v and u are keys
//    - A, B, C and D are subtrees
//
//                 T1 <> T2 
//              /           \ 
//             v              u   C' = split_ltn(T2)
//            / \            / \  D' = split_gtn(T2)  
//           A   B          C   D     
//             |              |               
//             |              |    
//             |              |  
//           A <> C'        B <> D' 
//             \              /
//              \            /
//               \          /
//             concat3(A<>C', v, B<>D')      
// Right-biased operation, meaning that if 
// both map contains the same key, the value
// from map_b will be chosen
//       
GMap.union<K: Type, V: Type>(
  cmp  : K -> K -> Cmp,
  map_a: GMap(K,V), 
  map_b: GMap(K,V)
) : GMap(K,V)
  
  case map_a:
  | tip => 
    case map_b:
    | tip => GMap.tip<K,V>;
    | bin => map_b;
  ;
  | bin => 
    case map_b:
    | tip => map_a;
    | bin => 
      let key   = map_b.key 
      let val   = map_b.val 
      let ltn   = GMap.split_ltn<K,V>(cmp, map_b.key, map_a)
      let gtn   = GMap.split_gtn<K,V>(cmp, map_b.key, map_a)
      let left  = GMap.union<K,V>(cmp, ltn, map_b.left)
      let right = GMap.union<K,V>(cmp, gtn, map_b.right)
      GMap.concat3<K,V>(cmp, key, val, left, right)
    ;
  ;