ECDSA.Jacobian.add(p: ECDSA.Jacobian, q: ECDSA.Jacobian): ECDSA.Jacobian
  get p.x p.y p.z = p
  case Bool.or(Nat.eql(p.x, 0), Nat.eql(p.y, 0)):
  | q;
  | get q.x q.y q.z = q
    case Bool.or(Nat.eql(q.x, 0), Nat.eql(q.y, 0)):
    | p;
    | let p.z2 = Nat.square(p.z)
      let q.z2 = Nat.square(q.z)
      let U1 = Nat.mul(p.x, q.z2)
      let U2 = Nat.mul(q.x, p.z2)
      let S1 = Nat.mul_var(3, p.y, q.z, q.z2)
      let S2 = Nat.mul_var(3, q.y, p.z, p.z2)
      let H = ECDSA.sub(U2, U1)
      let r = ECDSA.sub(S2, S1)
      // H = 0 meaning it's the same point.
      case Nat.eql(H, 0):
      | case Nat.eql(r, 0):
        | ECDSA.Jacobian.double(p);
        | ECDSA.Jacobian.0;;
      | let HH = ECDSA.mod(Nat.square(H))
        let HHH = ECDSA.mod(Nat.mul(H, HH))
        let V = Nat.mul(U1, HH)
        let x = ECDSA.sub(ECDSA.sub(Nat.square(r), HHH), Nat.mul(2, V))
        let y = ECDSA.sub(Nat.mul(r, ECDSA.sub(V, x)), Nat.mul(S1, HHH))
        let z = ECDSA.mod(Nat.mul_var(3, p.z, q.z, H))
        ECDSA.Jacobian.new(x, y, z);;;
