// Right fold a word
Word.fold<P: Nat -> Type, m: Nat>
(nil  : P(Nat.zero))
(w0   : <n: Nat> -> P(n) -> P(Nat.succ(n)))
(w1   : <n: Nat> -> P(n) -> P(Nat.succ(n)))
(word : Word(m))
: P(m)
  case word:
  | nil;
  | w0<word.size>(Word.fold<P,word.size>(nil, w0, w1, word.pred));
  | w1<word.size>(Word.fold<P,word.size>(nil, w0, w1, word.pred));
  : P(word.size);
