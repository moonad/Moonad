Map.merge.go<A: Type,B: Type,C: Type>(
  f: Bits -> A -> Maybe(C),
  g: Bits -> B -> Maybe(C),
  h: Bits -> A -> B -> Maybe(C),
  key: Bits,
  a: Map(A),
  b: Map(B)
) : Map(C)
  case a:
  | case b:
    | Map.new<>;
    | let val = case b.val as bv: | Maybe.none<>; | g(key,bv.value);
      Map.tie<>(val,
        Map.merge.go<,,>(f,g,h,Bits.0(key),Map.new<>,b.lft),
        Map.merge.go<,,>(f,g,h,Bits.1(key),Map.new<>,b.rgt));;
  | case b:
    | let val = case a.val as av: | Maybe.none<>; | f(key,av.value);
      Map.tie<>(val,
        Map.merge.go<,,>(f,g,h,Bits.0(key),a.lft,Map.new<>),
        Map.merge.go<,,>(f,g,h,Bits.1(key),a.rgt,Map.new<>));
    | let val = case a.val as av:
        | case b.val as bv: | Maybe.none<>;    | g(key,bv.value);;
        | case b.val as bv: | f(key,av.value); | h(key,av.value,bv.value);;
      Map.tie<>(val,
        Map.merge.go<,,>(f,g,h,Bits.0(key),a.lft,b.lft),
        Map.merge.go<,,>(f,g,h,Bits.1(key),a.rgt,b.rgt));;
