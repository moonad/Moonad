// Joins two trees with a key that is greater
// than the root key of the left, and less than
// the root key of the right 
// A comparison function must be provided 
GMap.concat3<K: Type, V: Type>(
  cmp  : K -> K -> Cmp, 
  key  : K,
  val  : V, 
  left : GMap(K,V),
  right: GMap(K,V) 
) : GMap(K,V)

  case left:
  | tip => 
    case right:
    // trivial case, both trees are empty
    | tip => GMap.singleton<K,V>(key, val);
    // if left is empty, we just insert (key,val) in the right tree
    | bin => GMap.insert<K,V>(cmp, key, val, right);
  ;
  | bin => 
    case right:
    // if right is empety, we just insert (key,val) in the left tree
    | tip => GMap.insert<K,V>(cmp, key, val, left);
    // if none of the trees are empty, we need to check if we can
    // make a balanced tree by using (key,val) as a new node
    // if not, we need to find the largest subtree on the side
    // "facing" the smaller tree that is small enough to balance 
    // with the smaller tree
    | bin => 
      let right_is_heavier = Nat.ltn(Nat.mul(GMap.w, left.size), right.size)
      let left_is_heavier  = Nat.ltn(Nat.mul(GMap.w, right.size), left.size)

      if right_is_heavier then 
        let new_key   = right.key 
        let new_val   = right.val 
        let new_left  = GMap.concat3<K,V>(cmp, key, val, left, right.left) 
        let new_right = right.right
        GMap.balance<K,V>(new_key, new_val, new_left, new_right)
      
      else if left_is_heavier then 
        let new_key   = left.key 
        let new_val   = left.val 
        let new_left  = left.left 
        let new_right = GMap.concat3<K,V>(cmp, key, val, left.right, right)
        GMap.balance<K,V>(new_key, new_val, new_left, new_right)

      else 
        GMap.node<K,V>(key, val, left, right)
    ;
  ;