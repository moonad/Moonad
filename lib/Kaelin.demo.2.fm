Kaelin.demo.2: App(U32)
  let model = Kaelin.Models.Zagatur.idle.000
  get size buffer = model
  let vox = VoxModel.alloc_size(size)
  def init
    0u
  def draw(state)
    App.Render.vox
    | use idx vox = U32.for<>(vox, 0u, size)
      let pos = VoxModel.get_pos(idx, model)
      let p_x = Pos32.get_x(pos)
      let p_y = Pos32.get_y(pos)
      let p_z = Pos32.get_z(pos)
      //get p_x p_y = Kaelin.demo.0.rotate2d(128u, 128u, p_x, p_y, state)
      let p_x = U32.sub(p_x, U32.div(p_z, 2u))
      let p_y = U32.sub(p_y, U32.div(p_z, 2u))
      let pos = Pos32.new(p_x, p_y, p_z)
      let vox = VoxModel.set_pos(idx, pos, vox)
      let vox = VoxModel.set_col(idx, VoxModel.get_col(idx, model), vox)
      vox;
  def when(event, state)
    case event:
    | U32.add(state, 1u);
    | state;
    | state;
  App.new<>(init, draw, when)
