T Kaelin.Sprite
| Kaelin.Sprite.new(pos: Pos32, ang: U32, vox: VoxModel);

Kaelin.draw(sprites: List(Kaelin.Sprite), screen: VoxModel): VoxModel
  def nil
    Pair.new<,>(0u, screen)
  def cons(sprite, state)
    get idx screen = state
    get sprite_pos sprite_ang sprite_vox = sprite
    let voxel_count = VoxModel.get_size(sprite_vox)
    for i : U32 = 0u .. voxel_count with screen:
      let pos = VoxModel.get_pos(i, sprite_vox)
      let p_x = Pos32.get_x(pos)
      let p_y = Pos32.get_y(pos)
      let p_z = Pos32.get_z(pos)
      get p_x p_y = Kaelin.demo.0.rotate2d(128u, 128u, p_x, p_y, sprite_ang)
      let p_x = U32.add(U32.sub(p_x, U32.div(p_z, 2u)), Pos32.get_x(sprite_pos))
      let p_y = U32.add(U32.sub(p_y, U32.div(p_z, 2u)), Pos32.get_y(sprite_pos))
      let p_z = U32.add(p_z, Pos32.get_z(sprite_pos))
      let pos = Pos32.new(p_x, p_y, p_z)
      let screen
        = VoxModel.set_pos
        | U32.add(i,idx);
        | pos;
        | screen;
      let screen
        = VoxModel.set_col
        | U32.add(i,idx);
        | VoxModel.get_col(i,sprite_vox);
        | screen;
      screen
    Pair.new<,>(U32.add(voxel_count, idx), screen)
  let fold = List.fold<Kaelin.Sprite>(sprites)
  get idx screen = fold<Pair(U32,VoxModel)>(nil, cons)
  screen
  
Kaelin.demo: App(U32)
  let wall = Kaelin.Models.wall
  let chest = Kaelin.Models.chest
  let seat = Kaelin.Models.seat
  let screen = VoxModel.alloc_size(524288u)
  def init
    0u
  def draw(state)
    let sprites = [
      Kaelin.Sprite.new(Pos32.new(0u,0u,0u), state, wall),
      Kaelin.Sprite.new(Pos32.new(32u,0u,0u), state, chest),
      Kaelin.Sprite.new(Pos32.new(64u,0u,0u), state, seat),
    ]
    App.Render.vox(Kaelin.draw(sprites, screen))
  def when(event, state)
    case event:
    | U32.add(state, 1u);
    | state;
    | state;
  App.new<>(init, draw, when)
