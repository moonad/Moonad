ECDSA.Jacobian.wNAF.aux(
  precomputes: List(ECDSA.Jacobian),
  p: ECDSA.Jacobian,
  f: ECDSA.Jacobian,
  n: Nat,
  W: Nat,
  window: Nat,
  windows: Nat,
  windowSize: Nat,
  mask: Nat,
  maxNumber: Nat)
: Pair(ECDSA.Jacobian, ECDSA.Jacobian)
  case Nat.ltn(window, windows):
  | let offset = Nat.mul(window, windowSize)
    // Extract W bits.
    let wbits = Nat.bitwise_and(n, mask)
    // Shift number by W bits.
    let n = Nat.div(n, maxNumber)
    // If the bits are bigger than max size, we'll split those.
    // +224 => 256 - 32
    get n wbits =
      case Nat.gtn(wbits, windowSize):
      | Pair.new<,>(Nat.succ(n), Int.new(wbits, maxNumber));
      | Pair.new<,>(n, Int.from_nat(wbits));
    // Check if we're onto Zero point.
    // Add random point inside current window to f.
    case Int.eql(wbits, Int.0):
    | // List.at should not return none. TODO: Use vector with known size instead of list for precomputes
      let q = Maybe.extract<>(List.at<>(offset, precomputes), ECDSA.Jacobian.0)
      let f = ECDSA.Jacobian.add(f, Bool.if<>(Nat.odd(window), ECDSA.Jacobian.negate(q), q))
      let window = Nat.succ(window)
      ECDSA.Jacobian.wNAF.aux(precomputes, p, f, n, W, window, windows, windowSize, mask, maxNumber) ;
    | // List.at should not return none. TODO: Use vector with known size instead of list for precomputes
      get neg wbits = Int.to_nat(wbits)
      let cached = Maybe.extract<>(List.at<>(Nat.pred(Nat.add(offset, wbits)), precomputes), ECDSA.Jacobian.0)
      let cached = Bool.if<>(neg, ECDSA.Jacobian.negate(cached), cached)
      let p = ECDSA.Jacobian.add(p, cached)
      let window = Nat.succ(window)
      ECDSA.Jacobian.wNAF.aux(precomputes, p, f, n, W, window, windows, windowSize, mask, maxNumber);;
  | Pair.new<ECDSA.Jacobian, ECDSA.Jacobian>(p, f);
