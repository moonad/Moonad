Vector.indl<A: Type, P: Nat -> Type, m: Nat>
(nil  : P(Nat.zero))
(ext   : <size: Nat> -> (a: A) -> (tail: P(size)) -> P(Nat.succ(size)))
(vector : Vector(A, m))
: P(m)
  case vector:
  | nil;
  | def P   = (n) P(Nat.succ(n))
    def nil = ext<Nat.zero>(vector.head, nil)
    def ext  = <x> ext<Nat.succ(x)>
    Vector.indl<A, P, vector.size>(nil, ext, vector.tail);
  : P(vector.size);
