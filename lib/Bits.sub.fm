// Subtracts two Bitstrings.
// If a is less than b, Bits.nil is returned.
Bits.sub(a: Bits, b: Bits): Bits
  Bits.reverse(Bits.sub.go(a, b, Bool.false, Bits.nil))

Bits.sub_.3: _
  Bits.1(Bits.1(Bits.nil))

Bits.sub_.7: _
  Bits.1(Bits.1(Bits.1(Bits.nil)))

Bits.sub_.8: _
  Bits.0(Bits.0(Bits.0(Bits.1(Bits.nil))))

Bits.sub_.10: _
  Bits.0(Bits.1(Bits.0(Bits.1(Bits.nil))))

Bits.sub_.test.0_minus_0: The(Nat, 0)
  The.value<>(Bits.to_nat(Bits.sub(Bits.nil, Bits.nil)))

Bits.sub_.test.0_with_leading_zero_minus_0: The(Nat, 0)
  The.value<>(Bits.to_nat(Bits.sub(Bits.0(Bits.nil), Bits.nil)))

Bits.sub_.test.0_minus_1: The(Nat, 0)
  The.value<>(Bits.to_nat(Bits.sub(Bits.0(Bits.nil), Bits.1(Bits.nil))))

Bits.sub_.test.1_with_leading_zeroes_minus_8: The(Nat, 0)
  The.value<>(Bits.to_nat(Bits.sub(Bits.1(Bits.0(Bits.0(Bits.0(Bits.nil)))), Bits.sub_.8)))

Bits.sub_.test.10_minus_10: The(Nat, 0)
  The.value<>(Bits.to_nat(Bits.sub(Bits.sub_.10, Bits.sub_.10)))

Bits.sub_.test.10_minus_3: The(Nat, 7)
  The.value<>(Bits.to_nat(Bits.sub(Bits.sub_.10, Bits.sub_.3)))

Bits.sub_.test.8_minus_7: The(Nat, 1)
  The.value<>(Bits.to_nat(Bits.sub(Bits.sub_.8, Bits.sub_.7)))

Bits.sub_.test.2_minus_8: The(Nat, 0)
  The.value<>(Bits.to_nat(Bits.sub(Bits.0(Bits.1(Bits.nil)), Bits.sub_.8)))

Bits.sub_.test.8_minus_2_where_2_is_longer: The(Nat, 6)
  The.value<>(Bits.to_nat(Bits.sub(Bits.sub_.8, Bits.0(Bits.1(Bits.0(Bits.0(Bits.0(Bits.nil))))))))
