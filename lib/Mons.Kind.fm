T Mons.Kind
| Mons.Kind.Mons(ele: Mons.Kind.mons, boss: Bool, pri_type: Mons.Type, agi: U32);
| Mons.Kind.Const(ele: Mons.Kind.const, portal: Bool, has_idle: Bool);
| Mons.Kind.Terrain(ele: Mons.Kind.terrain);
| Mons.Kind.Interactive(
  ele: Mons.Kind.inter,
  on: Bool, 
  eff: Mons.Kind.inter -> Mons.Game -> Mons.Game); // an effect to change the map

T Mons.Kind.mons
| Mons.Kind.mons.HERO;
| Mons.Kind.mons.MAGE;
| Mons.Kind.mons.BEHOLDER;
| Mons.Kind.mons.ZOIO;
| Mons.Kind.mons.CYCLOPE;
| Mons.Kind.mons.POISOLICK;
| Mons.Kind.mons.TROWL;
| Mons.Kind.mons.MIMIC;
| Mons.Kind.mons.AZULA;
| Mons.Kind.mons.EMERELDER;
// | Mons.Kind.mons.CRONI;
// | Mons.Kind.mons.ELLIOT;
// | Mons.Kind.mons.ESPECTRONUS;
// | Mons.Kind.mons.GAKI;
// | Mons.Kind.mons.GORR;
// | Mons.Kind.mons.LAMURIA;
// | Mons.Kind.mons.RAFIRE;
// | Mons.Kind.mons.VARGOULI;
// | Mons.Kind.mons.TUPITREE;
// | Mons.Kind.mons.LELA;
// | Mons.Kind.mons.MOSHY;
// | Mons.Kind.mons.BUFF;
// | Mons.Kind.mons.LAUGH;
// | Mons.Kind.mons.COBE_ORN;
// | Mons.Kind.mons.SANDY;
// | Mons.Kind.mons.SLIME;
// | Mons.Kind.mons.SPARKY;
// | Mons.Kind.mons.DOOMFIRE;
// | Mons.Kind.mons.BEANSTRONG;
// | Mons.Kind.mons.NAMELESS;
// | Mons.Kind.mons.OCTOKING;
// | Mons.Kind.mons.INPUBU;
// | Mons.Kind.mons.IGNITE;
// | Mons.Kind.mons.FROST;
// | Mons.Kind.mons.FRAB;
// | Mons.Kind.mons.ELECTROWL;
// | Mons.Kind.mons.NOCTUBRIGHT;
// | Mons.Kind.mons.AZULA;

T Mons.Kind.const
| Mons.Kind.const.FOUNTAIN(model: U32, slice: U32);
| Mons.Kind.const.CHEST;
| Mons.Kind.const.BIG_STAIRS;
| Mons.Kind.const.CRYSTAL;

T Mons.Kind.terrain
| Mons.Kind.terrain.VOID;
| Mons.Kind.terrain.VOID_BLACK;
| Mons.Kind.terrain.FLOOR(lvl: U32, model: U32);
| Mons.Kind.terrain.GRASS_PLANT;
| Mons.Kind.terrain.BUSH(model: U32);
| Mons.Kind.terrain.PLANT_0;
| Mons.Kind.terrain.SAND_0;
| Mons.Kind.terrain.PATH_BRICK;
| Mons.Kind.terrain.PATH_BLOCKER(lvl: U32, model: U32);
| Mons.Kind.terrain.MID_CITY(row: U32, column: U32);
// | Mons.Kind.terrain.MID_CITY5(column: U32);
// | Mons.Kind.terrain.MID_CITY4(column: U32);

T Mons.Kind.inter
| Mons.Kind.inter.LEVER(id: U32);
| Mons.Kind.inter.MOVE;

Mons.Kind.get_mhp(kind: Mons.Kind): U32
  case Mons.Kind.attr(kind) as attr:
  | attr.mhp;

Mons.Kind.get_battle_spr(kind: Mons.Kind, is_up: Bool): Image3D
  case Mons.Kind.attr(kind) as attr:
  | attr.battle_spr(is_up);

Mons.Kind.get_name(kind: Mons.Kind): String 
  case Mons.Kind.attr(kind) as attr:
  | attr.name;

Mons.Kind.get_blocks(kind: Mons.Kind): Bool
 case Mons.Kind.attr(kind) as attr:
  | attr.blocks;

Mons.Kind.get_atk(kind: Mons.Kind): U32
 case Mons.Kind.attr(kind) as attr:
  | attr.atk; 

Mons.Kind.get_skills(kind: Mons.Kind): List(Mons.Skill)
 case Mons.Kind.attr(kind) as attr:
  | attr.skills; 

Mons.Kind.get_agi(kind: Mons.Kind): U32
 case kind: 
 | mons => kind.agi;
 | const  => 3u;
 | terrain => 3u;
 | inter => 3u;

Mons.Kind.is_hero(kind: Mons.Kind): Bool
  case kind:
  | mons => 
    case kind.ele:
    | HERO        => Bool.true;
    | MAGE        => Bool.false;
    | BEHOLDER    => Bool.false;
    | ZOIO        => Bool.false;
    | CYCLOPE     => Bool.false;
    | POISOLICK   => Bool.false;
    | TROWL       => Bool.false;
    | MIMIC       => Bool.false;
    | AZULA       => Bool.false;
    | EMERELDER   => Bool.false;
    // | CRONI       => Bool.false;
    // | ELLIOT      => Bool.false;
    // | ESPECTRONUS => Bool.false;
    // | GAKI        => Bool.false;
    // | GORR        => Bool.false;
    // | LAMURIA     => Bool.false;
    // | RAFIRE      => Bool.false;
    // | VARGOULI    => Bool.false;
    // | TUPITREE    => Bool.false;
    // | LELA        => Bool.false;
    // | MOSHY       => Bool.false;
    // | POISOLICK   => Bool.false;
    // | BUFF        => Bool.false;
    // | LAUGH       => Bool.false;
    // | COBE_ORN    => Bool.false;
    // | SANDY       => Bool.false;
    // | SLIME       => Bool.false;
    // | SPARKY      => Bool.false;
    // | DOOMFIRE    => Bool.false;
    // | BEANSTRONG  => Bool.false;
    // | NAMELESS    => Bool.false;
    // | OCTOKING    => Bool.false;
    // | INPUBU      => Bool.false;
    // | IGNITE      => Bool.false;
    // | FROST       => Bool.false;
    // | FRAB        => Bool.false;
    // | ELECTROWL   => Bool.false;
    // | NOCTUBRIGHT => Bool.false;
    ;
  | const    => Bool.false;
  | terrain  => Bool.false;
  | inter => Bool.false;

Mons.Kind.animate_idle(kind: Mons.Kind): Bool
  case kind:
  | mons => Bool.false;
  | const => kind.has_idle;
  | terrain => Bool.false;
  | inter => Bool.false;

// Swap "on" property
Mons.Kind.swap_interactive(kind: Mons.Kind): Mons.Kind
  case kind:
  | mons => kind;
  | const => kind;
  | terrain => kind;
  | inter => Mons.Kind.Interactive(kind.ele, Bool.not(kind.on), kind.eff);

// Executes an effect in a game
Mons.Kind.exec_eff(kind: Mons.Kind, game: Mons.Game): Mons.Game
  case kind:
  | mons => game;
  | const => game;
  | terrain => game;
  | inter => 
    if kind.on then kind.eff(kind.ele, game)
    else game
  ;

// An effect to work with lever kind
Mons.Kind.inter_lever_eff(kind: Mons.Kind.inter, game: Mons.Game): Mons.Game
  case Mons.Game.get_hero_pos(game) as hero_pos:
  | game;
  | let hero_pos = hero_pos.value
    let x = Pos32.get_x(hero_pos)
    let y = Pos32.get_y(hero_pos)
    let z = Pos32.get_z(hero_pos) // dim
    open game:
    let map = game.map
    let hero_pair = Mons.Map.get_hero(hero_pos, map)
    let hero_obj  = Pair.fst<,>(hero_pair)
    let hero_idx  = Pair.snd<,>(hero_pair)
    let obj_idx = 0u
    open hero_obj:
    case kind:
    | lever => 
      if U32.eql(z, 1u) then // lvl 1
        if U32.eql(kind.id, 0u) then // lever 0
          let sign = Mons.Kind.new_const(Mons.Kind.const.CHEST, Bool.false)
          let obj_pos = Pos32.new(U32.add(1u, x), U32.sub(y, 1u), z)
          Mons.Game.map_push(obj_pos, sign, game)
        else game
      else game;

    | move => // an object that the hero can push
      // TODO: make hero walk to movable_obj_pos
      let movable_obj_pos = Mons.Object.get_adjacent_pos(hero_pos, hero_obj.dir, map)
      if Mons.Object.can_move_forward(movable_obj_pos, hero_obj.dir, game) then
        let obj = Mons.Kind.new_interactive_tool(kind, Bool.true, Mons.Kind.inter_lever_eff)
        let new_pos = Mons.Object.get_adjacent_pos(movable_obj_pos, hero_obj.dir, map)
        let game = Mons.Game.map_del(movable_obj_pos, obj_idx, game)
        Mons.Game.map_push(new_pos, obj, game)
      else game
    ;
  ;

Mons.Kind.new_terrain(kin: Mons.Kind.terrain): Mons.Object
  Mons.Object.new_of_kind(Mons.Kind.Terrain(kin))

Mons.Kind.new_const(kin: Mons.Kind.const, animate: Bool): Mons.Object
  Mons.Object.new_of_kind(Mons.Kind.Const(kin, Bool.false, animate))

Mons.Kind.new_portal(kin: Mons.Kind.const): Mons.Object
  Mons.Object.new_of_kind(Mons.Kind.Const(kin, Bool.true, Bool.true))

Mons.Kind.new_interactive_tool(
  kin: Mons.Kind.inter,
  stt: Bool, 
  fun: Mons.Kind.inter -> Mons.Game -> Mons.Game)
  : Mons.Object
  Mons.Object.new_of_kind(Mons.Kind.Interactive(kin, stt, fun))

Mons.Kind.new_mons(kin: Mons.Kind.mons, type: Mons.Type, agi: U32): List(Mons.Object)
  [ Mons.Object.new_of_kind(Mons.Kind.Mons(kin, Bool.false, type, agi)),
    // Mons.Kind.new_terrain(Mons.Kind.terrain.BUSH)
    ]

Mons.Kind.new_boss(kin: Mons.Kind.mons, type: Mons.Type, agi: U32): List(Mons.Object)
  [ Mons.Object.new_of_kind(Mons.Kind.Mons(kin, Bool.true, type, agi)),
    ]

Mons.Kind.set_static_sprites(spr: List(Image3D)): U32 -> U32 -> U32 -> Mons.Dir -> List(Image3D)
  (x,y,obj_ani,obj_dir) spr

Mons.Kind.set_pic(spr: List(Image3D)): Image3D
  case spr:
  | Mons.Assets.void;
  | spr.head;

// TODO: update default battle image
Mons.Kind.set_default_battle_spr:  Bool -> Image3D
  (is_up) Mons.Assets.battle_croni_u

Mons.Kind.update_agi(kind: Mons.Kind, agi: U32): Mons.Kind
  case kind:
  | mons => Mons.Kind.Mons(kind.ele, kind.boss, kind.pri_type, agi);
  | const => kind;
  | terrain => kind;
  | inter => kind;

// blocks: Bool,
// battles: Bool,
// mhp: U32,
// atk: U32
// name: String
// spr: (x: U32) -> (y: U32) -> (obj_ani: U32) -> (obj_dir: Mons.Dir)-> List(Image3D)
Mons.Kind.attr(kin: Mons.Kind): Mons.Attr
  case kin:
  | Mons.Kind.mons => 
    case kin.ele as kin:
    | HERO => Mons.Attr.new_hero;
    | MAGE => Mons.Attr.new_mage;
    
    | BEHOLDER => Mons.Attr.new_battleable(
      Mons.Assets.pic_beholder, [Mons.Assets.mons_beholder_d_0], "BEHOLDER",
      (is_up) Bool.if<>(is_up, Mons.Assets.battle_beholder_u, Mons.Assets.battle_beholder_d),
      Mons.Skill.dummy_skills);
    
    | ZOIO => Mons.Attr.new_battleable(
      Mons.Assets.pic_zoio, [Mons.Assets.mons_zoio_d_0], "ZOIO",
      (is_up) Bool.if<>(is_up, Mons.Assets.battle_zoio_u, Mons.Assets.battle_zoio_d),
      [Mons.Skill.slam, Mons.Skill.sand_tomb, Mons.Skill.protect, Mons.Skill.dig]);
    
    | CYCLOPE => Mons.Attr.new_battleable(
      Mons.Assets.pic_cyclop, [Mons.Assets.mons_cyclop_d_0], "CYCLOPE",
      (is_up) Bool.if<>(is_up, Mons.Assets.battle_cyclop_u, Mons.Assets.battle_cyclop_d),
      [Mons.Skill.slam, Mons.Skill.rock_smash, Mons.Skill.recover, Mons.Skill.counter ]);
    
    | POISOLICK => Mons.Attr.new_battleable(
      Mons.Assets.pic_poisolick, [Mons.Assets.mons_poisolick_d_0], "POISOLICK",
      (is_up) Bool.if<>(is_up, Mons.Assets.battle_poisolick_u, Mons.Assets.battle_poisolick_d),
      [Mons.Skill.crunch, Mons.Skill.sludge_bomb, Mons.Skill.iron_defense, Mons.Skill.gyro_ball]);
    
    | TROWL => Mons.Attr.new_battleable(
      Mons.Assets.pic_trowl, [Mons.Assets.mons_trowl_d_0], "TROWL",
      (is_up) Bool.if<>(is_up, Mons.Assets.battle_trowl_u, Mons.Assets.battle_trowl_d),
      [Mons.Skill.wing_attack, Mons.Skill.crunch, Mons.Skill.recover, Mons.Skill.agility]);
    
    | MIMIC => Mons.Attr.new_battleable( // OK
      Mons.Assets.pic_mimic, [Mons.Assets.mons_mimic_d_0], "MIMIC",
      (is_up) Bool.if<>(is_up, Mons.Assets.battle_mimic_u, Mons.Assets.battle_mimic_d),
      [Mons.Skill.super_fang, Mons.Skill.crunch, Mons.Skill.hypnosis, Mons.Skill.dream_eater]);
    
    | AZULA => Mons.Attr.new_battleable(
      Mons.Assets.pic_azula, [Mons.Assets.mons_azula_d_0], "AZULA",
      (is_up) Bool.if<>(is_up, Mons.Assets.battle_azula_u, Mons.Assets.battle_azula_d),
      [Mons.Skill.wing_attack, Mons.Skill.moonlight, Mons.Skill.play_rough, Mons.Skill.psychic]);
    
    | EMERELDER => Mons.Attr.new_battleable(
      Mons.Assets.pic_emerelder, [Mons.Assets.mons_emerelder_d_0], "EMERELDER",
      (is_up) Bool.if<>(is_up, Mons.Assets.battle_emerelder_u, Mons.Assets.battle_emerelder_d),
      [Mons.Skill.ancient_power, Mons.Skill.thunder_wave, Mons.Skill.charge, Mons.Skill.iron_defense]);

//     | BATH => Mons.Attr.new_battleable(
      // Mons.Assets.pic_bath, [Mons.Assets.mons_bath_d_0], "BATH",
      // (is_up) Bool.if<>(is_up, Mons.Assets.battle_bath_u, Mons.Assets.battle_bath_d),
      // Mons.Skill.kind(kin));
    // | CRONI => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_croni, [Mons.Assets.mons_croni_d_0], "CRONI",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_croni_u, Mons.Assets.battle_croni_d),
    //   Mons.Skill.kind(kin));
    // | ELLIOT => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_elliot, [Mons.Assets.mons_elliot_d_0], "ELLIOT",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_elliot_u, Mons.Assets.battle_elliot_d),
    //   Mons.Skill.kind(kin));
    // | ESPECTRONUS => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_espectronus, [Mons.Assets.mons_espectronus_d_0], "ESPECTRONUS",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_espectronus_u, Mons.Assets.battle_espectronus_d),
    //   Mons.Skill.kind(kin));
    // | GAKI => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_gaki, [Mons.Assets.mons_gaki_d_0], "GAKI",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_gaki_u, Mons.Assets.battle_gaki_d),
    //   Mons.Skill.kind(kin));
    // | GORR => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_gorr, [Mons.Assets.mons_gorr_d_0], "GORR",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_gorr_u, Mons.Assets.battle_gorr_d),
    //   Mons.Skill.kind(kin));
    // | LAMURIA => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_lamuria, [Mons.Assets.mons_lamuria_d_0], "LAMURIA",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_lamuria_u, Mons.Assets.battle_lamuria_d),
    //   Mons.Skill.kind(kin));
    // | RAFIRE => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_rafire, [Mons.Assets.mons_rafire_d_0], "RAFIRE",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_rafire_u, Mons.Assets.battle_rafire_d),
    //   Mons.Skill.kind(kin));
    // | VARGOULI => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_vargouli, [Mons.Assets.mons_vargouli_d_0], "VARGOULI",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_vargouli_u, Mons.Assets.battle_vargouli_d),
    //   Mons.Skill.kind(kin));
    // | TUPITREE => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_tupitree, [Mons.Assets.mons_tupitree_d_0], "TUPITREE",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_tupitree_u, Mons.Assets.battle_tupitree_d),
    //   Mons.Skill.kind(kin));
    // | LELA => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_lela, [Mons.Assets.mons_lela_d_0], "LELA",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_lela_u, Mons.Assets.battle_lela_d),
    //   Mons.Skill.kind(kin));
    // | MOSHY => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_moshy, [Mons.Assets.mons_moshy_d_0], "MOSHY",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_moshy_u, Mons.Assets.battle_moshy_d),
    //   Mons.Skill.kind(kin));
  
    // | BUFF => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_buff, [Mons.Assets.mons_buff_d_0], "BUFF",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_buff_u, Mons.Assets.battle_buff_d),
    //   Mons.Skill.kind(kin));
    // | LAUGH => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_laugh, [Mons.Assets.mons_laugh_d_0], "LAUGH",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_laugh_u, Mons.Assets.battle_laugh_d),
    //   Mons.Skill.kind(kin));
    // | COBE_ORN => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_cobeorn, [Mons.Assets.mons_cobeorn_d_0], "COBE_ORN",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_cobeorn_u, Mons.Assets.battle_cobeorn_d),
    //   Mons.Skill.kind(kin));
    // | SANDY => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_sandy, [Mons.Assets.mons_sandy_d_0], "SANDY",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_sandy_u, Mons.Assets.battle_sandy_d),
    //   Mons.Skill.kind(kin));
    // | SLIME => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_slime, [Mons.Assets.mons_slime_d_0], "SLIME",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_slime_u, Mons.Assets.battle_slime_d),
    //   Mons.Skill.kind(kin));
    // | SPARKY => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_sparky, [Mons.Assets.mons_sparky_d_0], "SPARKY",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_sparky_u, Mons.Assets.battle_sparky_d),
    //   Mons.Skill.kind(kin));
    // | DOOMFIRE => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_doomfire, [Mons.Assets.mons_doomfire_d_0], "DOOMFIRE",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_doomfire_u, Mons.Assets.battle_doomfire_d),
    //   Mons.Skill.kind(kin));
    // | BEANSTRONG => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_beanstrong, [Mons.Assets.mons_beanstrong_d_0], "BEANSTRONG",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_beanstrong_u, Mons.Assets.battle_beanstrong_d),
    //   Mons.Skill.kind(kin));
    // | NAMELESS => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_nameless, [Mons.Assets.mons_nameless_d_0], "NAMELESS",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_nameless_u, Mons.Assets.battle_nameless_d),
    //   Mons.Skill.kind(kin));
    // | OCTOKING => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_octoking, [Mons.Assets.mons_octoking_d_0], "OCTOKING",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_octoking_u, Mons.Assets.battle_octoking_d),
    //   Mons.Skill.kind(kin));
    // | INGPUBU => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_ingpubu, [Mons.Assets.mons_ingpubu_d_0], "INGPUBU",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_ingpubu_u, Mons.Assets.battle_ingpubu_d),
    //   Mons.Skill.kind(kin));
    // | ZOIO => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_zoio, [Mons.Assets.mons_zoio_d_0], "ZOIO",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_zoio_u, Mons.Assets.battle_zoio_d),
    //   Mons.Skill.kind(kin));
    // | IGNITE => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_ignite, [Mons.Assets.mons_ignite_d_0], "IGNITE",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_ignite_u, Mons.Assets.battle_ignite_d),
    //   Mons.Skill.kind(kin));
    // | FROST => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_frost, [Mons.Assets.mons_frost_d_0], "FROST",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_frost_u, Mons.Assets.battle_frost_d),
    //   Mons.Skill.kind(kin));
    // | FRAB => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_frab, [Mons.Assets.mons_frab_d_0], "FRAB",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_frab_u, Mons.Assets.battle_frab_d),
    //   Mons.Skill.kind(kin));
    // | ELECTROWL => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_electrowl, [Mons.Assets.mons_electrowl_d_0], "ELECTROWL",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_electrowl_u, Mons.Assets.battle_electrowl_d),
    //   Mons.Skill.kind(kin));
    // | NOCTUBRIGHT => Mons.Attr.new_battleable(
    //   Mons.Assets.pic_noctubright, [Mons.Assets.mons_noctubright_d_0], "NOCTUBRIGHT",
    //   (is_up) Bool.if<>(is_up, Mons.Assets.battle_noctubright_u, Mons.Assets.battle_noctubright_d),
    //   Mons.Skill.kind(kin));
  ; // end mons
  
  | Mons.Kind.construction =>
    case kin.ele as kin:
    | FOUNTAIN =>
        Mons.Attr.new_blockable([
          Mons.Assets.0_fountain_0, Mons.Assets.0_fountain_1,
          Mons.Assets.0_fountain_2, Mons.Assets.0_fountain_3]);
    | Mons.CHEST => Mons.Attr.new_neutral([Mons.Assets.tile_chest_0]);
    | Mons.BIG_STAIRS => Mons.Attr.new_neutral([Mons.Assets.0_big_stair]);
    | CRYSTAL => 
      Mons.Attr.new_neutral([
        Mons.Assets.0_crystal0, Mons.Assets.0_crystal1, Mons.Assets.0_crystal2,
        Mons.Assets.0_crystal3, Mons.Assets.0_crystal4, Mons.Assets.0_crystal5,
        Mons.Assets.0_crystal6, Mons.Assets.0_crystal7
      ]);
  ; // end of construction

  | Mons.Kind.terrain => 
    case kin.ele as kin:
    | VOID => Mons.Attr.new_blockable([Mons.Assets.void]);
    | VOID_BLACK => Mons.Attr.new_blockable([Mons.Assets.void_black]);
    | FLOOR => Mons.Attr.new_neutral([Mons.Assets.0_brick_floor]);
      // if U32.eql(kin.lvl, 1u) then
      //   if U32.eql(kin.model, 0u) then Mons.Attr.new_neutral([Mons.Assets.0_brick_floor])
      //   else Mons.Attr.new_neutral([Mons.Assets.0_brick_floor])
      // else Mons.Attr.new_neutral([Mons.Assets.0_brick_floor]);
    | PLANT => Mons.Attr.new_neutral([Mons.Assets.grass_2]);
    | BUSH => Mons.Attr.new_neutral([Mons.Assets.bush_0, Mons.Assets.bush_1]);
    | PLANT_0 => Mons.Attr.new_blockable([Mons.Assets.home_decor_plant_0]);
    | SAND_0 => Mons.Attr.new_neutral([Mons.Assets.sand_0]);
    | PATH_BRICK => Mons.Attr.new_neutral([Mons.Assets.rock_path_0_m]);
    | PATH_BLOCKER => Mons.Attr.new_blockable([Mons.Assets.rock_path_0_m]);
    | MID_CITY => Mons.Kind.mid_city(kin.row, kin.column);
    ; // end terrain

    | INTERACTIVE =>
      case kin.ele as kin:
      | lever =>
        if kin.on then Mons.Attr.new_neutral([Mons.Assets.push_tool_on])
        else Mons.Attr.new_neutral([Mons.Assets.push_tool_off]);
      | move => Mons.Attr.new_blockable([Mons.Assets.home_decor_plant_0]);
    ; // end inter
    

Mons.Kind.mid_city(row: U32, column: U32): Mons.Attr
  if U32.eql(row, 19u) then 
    if U32.eql(column, 1u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_19_1])
    else if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_19_2])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_19_3])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_19_4])
    else Mons.Attr.new_neutral([Mons.Assets.mid_city_19_5])
 
  else if U32.eql(row, 18u) then 
    if U32.eql(column, 1u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_18_1])
    else if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_18_2])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_18_3])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_18_4])
    else Mons.Attr.new_neutral([Mons.Assets.mid_city_18_5])
 
  else if U32.eql(row, 17u) then 
    if U32.eql(column, 1u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_17_1])
    else if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_17_2])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_17_3])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_17_4])
    else Mons.Attr.new_neutral([Mons.Assets.mid_city_17_5])
 
  else if U32.eql(row, 16u) then 
    if U32.eql(column, 1u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_16_1])
    else if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_16_2])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_16_3])
    else if U32.eql(column, 4u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_16_4])
    else Mons.Attr.new_neutral([Mons.Assets.mid_city_16_5])
 
  else if U32.eql(row, 15u) then 
    if U32.eql(column, 1u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_15_1])
    else if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_15_2])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_15_3])
    else if U32.eql(column, 4u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_15_4])
    else Mons.Attr.new_neutral([Mons.Assets.mid_city_15_5])
 
  else if U32.eql(row, 14u) then 
    if U32.eql(column, 1u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_14_1])
    else if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_14_2])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_14_3])
    else if U32.eql(column, 4u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_14_4])
    else Mons.Attr.new_neutral([Mons.Assets.mid_city_14_5])
 
  else if U32.eql(row, 13u) then 
    if U32.eql(column, 1u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_13_1])
    else if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_13_2])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_13_3])
    else if U32.eql(column, 4u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_14_4])
    else Mons.Attr.new_neutral([Mons.Assets.mid_city_13_5])
 
  else if U32.eql(row, 12u) then 
    if U32.eql(column, 1u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_12_1])
    else if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_12_2])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_12_3])
    else if U32.eql(column, 4u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_12_4])
    else Mons.Attr.new_neutral([Mons.Assets.mid_city_12_5])
 
  else if U32.eql(row, 11u) then 
    if U32.eql(column, 1u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_11_1])
    else if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_11_2])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_11_3])
    else if U32.eql(column, 4u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_11_4])
    else Mons.Attr.new_neutral([Mons.Assets.mid_city_11_5])
 
  else if U32.eql(row, 10u) then 
    if U32.eql(column, 1u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_10_1])
    else if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_10_2])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_10_3])
    else if U32.eql(column, 4u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_10_4])
    else Mons.Attr.new_neutral([Mons.Assets.mid_city_10_5])
 
  else if U32.eql(row, 9u) then 
    if U32.eql(column, 1u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_9_1])
    else if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_9_2])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_9_3])
    else if U32.eql(column, 4u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_9_4])
    else Mons.Attr.new_neutral([Mons.Assets.mid_city_9_5])
 
  else if U32.eql(row, 8u) then 
    if U32.eql(column, 1u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_8_1])
    else if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_8_2])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_8_3])
    else if U32.eql(column, 4u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_8_4])
    else Mons.Attr.new_neutral([Mons.Assets.mid_city_8_5])
 
  else if U32.eql(row, 7u) then 
    if U32.eql(column, 1u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_7_1])
    else if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_7_2])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_7_3])
    else if U32.eql(column, 4u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_7_4])
    else Mons.Attr.new_neutral([Mons.Assets.mid_city_7_5])
 
  else if U32.eql(row, 6u) then 
    if U32.eql(column, 1u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_6_1])
    else if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_6_2])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_6_3])
    else if U32.eql(column, 4u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_6_4])
    else Mons.Attr.new_neutral([Mons.Assets.mid_city_6_5])
 
  else if U32.eql(row, 5u) then 
    if U32.eql(column, 1u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_5_1])
    else if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_5_2])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_5_3])
    else if U32.eql(column, 4u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_5_4])
    else Mons.Attr.new_neutral([Mons.Assets.mid_city_5_5])
 
  else if U32.eql(row, 4u) then 
    if U32.eql(column, 1u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_4_1])
    else if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_4_2])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_4_3])
    else if U32.eql(column, 4u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_4_4])
    else Mons.Attr.new_neutral([Mons.Assets.mid_city_4_5])
 
  else if U32.eql(row, 3u) then 
    if U32.eql(column, 1u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_3_1])
    else if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_3_2])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_3_3])
    else if U32.eql(column, 4u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_3_4])
    else Mons.Attr.new_neutral([Mons.Assets.mid_city_3_5])

  else if U32.eql(row, 2u) then 
    if U32.eql(column, 1u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_2_1])
    else if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_2_2])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_2_3])
    else if U32.eql(column, 4u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_2_4])
    else Mons.Attr.new_neutral([Mons.Assets.mid_city_2_5])

  else if U32.eql(row, 1u) then
    if U32.eql(column, 1u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_1_1])
    else if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_1_2])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_1_3])
    else if U32.eql(column, 4u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_1_4])
    else Mons.Attr.new_neutral([Mons.Assets.mid_city_1_5])

  else if U32.eql(row, 0u) then
    if U32.eql(column, 1u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_0_1])
    else if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_0_2])
    else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_0_3])
    else if U32.eql(column, 4u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_0_4])
    else Mons.Attr.new_neutral([Mons.Assets.mid_city_0_5])

  else Mons.Attr.new_blockable([Mons.Assets.void])

// Mons.Kind.mid_city(row: U32, column: U32): Mons.Attr
//   if U32.eql(row, 6u) then
//     if U32.eql(column, 0u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_6_0])
//     else if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_6_2])
//     else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_6_3])
//     else Mons.Attr.new_neutral([Mons.Assets.mid_city_6_4])

//   else if U32.eql(row, 5u) then
//     if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_5_2])
//     else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_5_3])
//     else Mons.Attr.new_neutral([Mons.Assets.mid_city_5_4])

//   else if U32.eql(row, 4u) then
//     if U32.eql(column, 2u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_4_2])
//     else if U32.eql(column, 3u) then Mons.Attr.new_neutral([Mons.Assets.mid_city_4_3])
//     else Mons.Attr.new_neutral([Mons.Assets.mid_city_4_4])
//   else Mons.Attr.new_blockable([Mons.Assets.void])