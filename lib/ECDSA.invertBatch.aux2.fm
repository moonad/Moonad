ECDSA.invertBatch.aux2(nums: List(Nat), modulo: Nat, acc: Nat, scratch: List(Nat), inverts: List(Nat)): List(Nat)
  case nums:
  | inverts;
  | case scratch:
    | inverts; // Should not happen
    | case Nat.eql(nums.head, 0):
      | let inverts = List.cons<>(0, inverts)
        ECDSA.invertBatch.aux2(nums.tail, modulo, acc, scratch.tail, inverts);
      | let inverts = List.cons<>(Nat.mod(Nat.mul(acc, scratch.head), modulo), inverts)
        let acc = Nat.mod(Nat.mul(acc, nums.head), modulo)
        ECDSA.invertBatch.aux2(nums.tail, modulo, acc, scratch.tail, inverts);;;
