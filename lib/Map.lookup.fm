// Returns the element stored at a given key and a copy of the map.
Map.lookup<A: Type>(bits: Bits, val: A, map: Map(A)): Pair(A, Map(A))
  case bits:
  | case map:
    | let map = Map.tie<A>(Maybe.some<A>(val), Map.new<A>, Map.new<A>)
      Pair.new<A><Map(A)>(val, map);
    | let value = Maybe.extract<A>(map.val, val)
      let map = Map.tie<A>(Maybe.some<A>(value), map.lft, map.rgt)
      Pair.new<A><Map(A)>(value, map);;
  | case map:
    | get p.fst p.snd = Map.lookup<A>(bits.pred, val, Map.new<A>)
      Pair.new<A><Map(A)>(p.fst, Map.tie<A>(Maybe.none<A>, p.snd, Map.new<A>));
    | get p.fst p.snd = Map.lookup<A>(bits.pred, val, map.lft)
      Pair.new<A><Map(A)>(p.fst, Map.tie<A>(map.val, p.snd, map.rgt));;
  | case map:
    | get p.fst p.snd = Map.lookup<A>(bits.pred, val, Map.new<A>)
      Pair.new<A><Map(A)>(p.fst, Map.tie<A>(Maybe.none<A>, Map.new<A>, p.snd));
    | get p.fst p.snd = Map.lookup<A>(bits.pred, val, map.rgt)
      Pair.new<A><Map(A)>(p.fst, Map.tie<A>(map.val, map.lft, p.snd));;
