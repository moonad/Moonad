ECDSA.Point.to_bytes(p: ECDSA.Point, compressed: Bool): U8_Vector(Bool.if<Nat>(compressed, 33, 65))
 get p.x p.y = p
 let x = U8_Vector.from_nat(32, p.x)
 case compressed:
 | let is_odd_byte = U8.from_nat(Bool.if<Nat>(Nat.odd(p.y), 3, 2))
   Vector.ext<U8, 32>(is_odd_byte, x);
 | let uncompressed_byte = U8.from_nat(4)
   let y = U8_Vector.from_nat(32, p.y)
   let uncompressed_vec = Vector.concat<U8, 32, 32>(x, y)
   Vector.ext<U8, 64>(uncompressed_byte, uncompressed_vec);
 : U8_Vector(Bool.if<Nat>(compressed.self, 33, 65));
