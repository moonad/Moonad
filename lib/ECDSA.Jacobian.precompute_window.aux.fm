ECDSA.Jacobian.precompute_window.aux(
  p: ECDSA.Jacobian,
  windows: Nat,
  points: List.Builder(ECDSA.Jacobian),
  window: Nat,
  base: ECDSA.Jacobian,
  size: Nat,
  i: Nat)
: List.Builder(ECDSA.Jacobian)
  case Nat.ltn(window, windows):
  | case Nat.ltn(i, size):
    | let base = ECDSA.Jacobian.add(base, p)
      let points = List.Builder.snoc<ECDSA.Jacobian>(base, points)
      ECDSA.Jacobian.precompute_window.aux(p, windows, points, window, base, size, Nat.succ(i));
    | let p = ECDSA.Jacobian.double(base)
      ECDSA.Jacobian.precompute_window.aux(p, windows, points, Nat.succ(window), ECDSA.Jacobian.0, size, 0);;
  | points;
