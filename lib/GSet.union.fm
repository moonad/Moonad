//   Suppose we have two Sets: T1 and T2  
//     T1            T2 
//      v             u 
//     / \           / \ 
//    A   B         C   D        
//
//    We can implement efficient Set x Set -> Set operations
//    but applying a "divide and conque" strategy, that means
//    we'll break those sets in smaller parts using `split_ltn`
//    and `split_gtn`, perform the desired  operation on those 
//    smaller parts, and then combine everything with `concat3`
//
//    - <> is a binary operation (union, difference, intersection)
//    - v and u are values/elements
//    - A, B, C and D are subtrees
//
//                 T1 <> T2 
//              /           \ 
//             v              u   C' = split_ltn(T2)
//            / \            / \  D' = split_gtn(T2)  
//           A   B          C   D     
//             |   \__  __/   |               
//             |     _\/_     |    
//             |    /     \   |  
//           A <> C'        B <> D' 
//             \              /
//              \            /
//               \          /
//             concat3(A<>C', v, B<>D')      
//                 
GSet.union<A: Type>(cmp: A -> A -> Cmp, set_a: GSet(A), set_b: GSet(A)): GSet(A)
  case set_a:
  | tip => 
    case set_b:
    | tip => GSet.tip<>;
    | bin => set_b;
  ;
  | bin => 
    case set_b:
    | tip => set_a;
    | bin => 
      // divide & conquer
      let ltn   = GSet.split_ltn<>(cmp, set_b.val, set_a)
      let gtn   = GSet.split_gtn<>(cmp, set_b.val, set_a)
      let left  = GSet.union<>(cmp, ltn, set_b.left)
      let right = GSet.union<>(cmp, gtn, set_b.right)
      GSet.concat3<>(cmp, set_b.val, left, right)
    ;
  ;
