Parser.take_while1(lbl: String, f: Char -> Bool): Parser(String)
  (s1)
  get pos str errs = s1
  get took rest = String.span(f,str)
  def len = String.length(took)
  def s2 = Parser.State.make(Nat.add(pos,len),rest,errs)
  def l = List.pure<>(Parser.Item.label(lbl))
  case str:
  | Parser.Reply.err<>(s2,Parser.Error.new(pos,Maybe.some<>(Parser.Item.eof),l));
  | case len:
    | def unx = Maybe.some<>(Parser.Item.tokens(String.pure(str.head)))
      Parser.Reply.err<>(s2,Parser.Error.new(pos,unx,l));
    | Parser.Reply.val<>(s2,took);;
