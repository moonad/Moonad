// Modifies the element at a given key, returns it and a copy of the map.
// This used to be important on linear back-ends, but it isn't linear anymore.
// TODO: use `with` to make this function linear again.
Map.query<A: Type>(cpy: A -> Pair(A, A), bits: Bits, map: Map(A)): Pair(Map(A), Maybe(A))
  case bits:
  | case map:
    | let map = Map.new<>
      let val = Maybe.none<>
      Pair.new<><>(map, val);
    | case map.val:
      | let map = Map.tie<>(Maybe.none<>, map.lft, map.rgt)
        let val = Maybe.none<>
        Pair.new<><>(map, val);
      | get p.fst p.snd = cpy(map.val.value)
        let map = Map.tie<>(Maybe.some<>(p.fst), map.lft, map.rgt)
        let val = Maybe.some<>(p.snd)
        Pair.new<><>(map, val);;;
  | case map:
    | let map = Map.new<>
      let val = Maybe.none<>
      Pair.new<><>(map, val);
    | get p.fst p.snd = Map.query<>(cpy, bits.pred, map.lft)
      let map = Map.tie<>(map.val, p.fst, map.rgt)
      let val = p.snd
      Pair.new<><>(map, val);;
  | case map:
    | let map = Map.new<>
      let val = Maybe.none<>
      Pair.new<><>(map, val);
    | get p.fst p.snd = Map.query<>(cpy, bits.pred, map.rgt)
      let map = Map.tie<>(map.val, map.lft, p.fst)
      let val = p.snd
      Pair.new<><>(map, val);;
