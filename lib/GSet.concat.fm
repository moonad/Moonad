// Similar to GSet.concat3, but doesn't use a "glue element"
GSet.concat<A: Type>(set_a: GSet(A), set_b: GSet(A)): GSet(A)
  case set_a:
  | tip => 
    case set_b:
    | tip => GSet.tip<>;
    | bin => set_b;
  ;
  | bin => 
    case set_b:
    | tip => set_a;
    | bin => 
      let b_is_too_heavy = Nat.ltn(Nat.mul(GSet.w, set_a.size), set_b.size)
      let a_is_too_heavy = Nat.ltn(Nat.mul(GSet.w, set_b.size), set_b.size)

      if b_is_too_heavy then 
        let new_val   = set_b.val 
        let new_left  = GSet.concat<>(set_a, set_b.left)
        let new_right = set_b.right  
        GSet.balance<>(new_val, new_left, new_right)

      else if a_is_too_heavy then 
        let new_val   = set_a.val 
        let new_left  = set_a.left 
        let new_right = GSet.concat<>(set_a.right, set_b)
        GSet.balance<>(new_val, new_left, new_right)

      else 
        let min_b     = GSet.min<>(set_b)
        let new_val   = Maybe.extract<>(min_b, set_b.val) //we know b isn't empty
        let new_left  = set_a
        let new_right = GSet.delete_min<>(set_b)
        GSet.balance<>(new_val, new_left, new_right)
    ;
  ;
