// Possibly returns a pair of the minimum key and value 
// of the map
// Since we're working with a balanced tree we only need
// to check the the left subtree, if it's empty, the 
// minimum value is the root, because all elements to the 
// right are greater than it. If it's not, recurse until 
// the leftmost element is found
GMap.min<K: Type, V: Type>(map: GMap(K,V)): Maybe(Pair(K,V))
  case map:
  | tip => Maybe.none<Pair(K,V)>;
  | bin => 
    case map.left:
    | tip => Maybe.some<Pair(K,V)>(Pair.new<K,V>(map.key, map.val));
    | bin => GMap.min<K,V>(map.left);;

